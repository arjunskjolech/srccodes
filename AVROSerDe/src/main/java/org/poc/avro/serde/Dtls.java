/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.poc.avro.serde;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Dtls extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Dtls\",\"namespace\":\"org.poc.avro.serde\",\"fields\":[{\"name\":\"sender\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":\"string\"},{\"name\":\"subject\",\"type\":\"string\"},{\"name\":\"cc\",\"type\":{\"type\":\"array\",\"items\":\"string\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence sender;
  @Deprecated public java.lang.CharSequence timestamp;
  @Deprecated public java.lang.CharSequence subject;
  @Deprecated public java.util.List<java.lang.CharSequence> cc;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Dtls() {}

  /**
   * All-args constructor.
   */
  public Dtls(java.lang.CharSequence sender, java.lang.CharSequence timestamp, java.lang.CharSequence subject, java.util.List<java.lang.CharSequence> cc) {
    this.sender = sender;
    this.timestamp = timestamp;
    this.subject = subject;
    this.cc = cc;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return sender;
    case 1: return timestamp;
    case 2: return subject;
    case 3: return cc;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: sender = (java.lang.CharSequence)value$; break;
    case 1: timestamp = (java.lang.CharSequence)value$; break;
    case 2: subject = (java.lang.CharSequence)value$; break;
    case 3: cc = (java.util.List<java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'sender' field.
   */
  public java.lang.CharSequence getSender() {
    return sender;
  }

  /**
   * Sets the value of the 'sender' field.
   * @param value the value to set.
   */
  public void setSender(java.lang.CharSequence value) {
    this.sender = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   */
  public java.lang.CharSequence getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.CharSequence value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'subject' field.
   */
  public java.lang.CharSequence getSubject() {
    return subject;
  }

  /**
   * Sets the value of the 'subject' field.
   * @param value the value to set.
   */
  public void setSubject(java.lang.CharSequence value) {
    this.subject = value;
  }

  /**
   * Gets the value of the 'cc' field.
   */
  public java.util.List<java.lang.CharSequence> getCc() {
    return cc;
  }

  /**
   * Sets the value of the 'cc' field.
   * @param value the value to set.
   */
  public void setCc(java.util.List<java.lang.CharSequence> value) {
    this.cc = value;
  }

  /** Creates a new Dtls RecordBuilder */
  public static org.poc.avro.serde.Dtls.Builder newBuilder() {
    return new org.poc.avro.serde.Dtls.Builder();
  }
  
  /** Creates a new Dtls RecordBuilder by copying an existing Builder */
  public static org.poc.avro.serde.Dtls.Builder newBuilder(org.poc.avro.serde.Dtls.Builder other) {
    return new org.poc.avro.serde.Dtls.Builder(other);
  }
  
  /** Creates a new Dtls RecordBuilder by copying an existing Dtls instance */
  public static org.poc.avro.serde.Dtls.Builder newBuilder(org.poc.avro.serde.Dtls other) {
    return new org.poc.avro.serde.Dtls.Builder(other);
  }
  
  /**
   * RecordBuilder for Dtls instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Dtls>
    implements org.apache.avro.data.RecordBuilder<Dtls> {

    private java.lang.CharSequence sender;
    private java.lang.CharSequence timestamp;
    private java.lang.CharSequence subject;
    private java.util.List<java.lang.CharSequence> cc;

    /** Creates a new Builder */
    private Builder() {
      super(org.poc.avro.serde.Dtls.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.poc.avro.serde.Dtls.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.sender)) {
        this.sender = data().deepCopy(fields()[0].schema(), other.sender);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.subject)) {
        this.subject = data().deepCopy(fields()[2].schema(), other.subject);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.cc)) {
        this.cc = data().deepCopy(fields()[3].schema(), other.cc);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Dtls instance */
    private Builder(org.poc.avro.serde.Dtls other) {
            super(org.poc.avro.serde.Dtls.SCHEMA$);
      if (isValidValue(fields()[0], other.sender)) {
        this.sender = data().deepCopy(fields()[0].schema(), other.sender);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.subject)) {
        this.subject = data().deepCopy(fields()[2].schema(), other.subject);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.cc)) {
        this.cc = data().deepCopy(fields()[3].schema(), other.cc);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'sender' field */
    public java.lang.CharSequence getSender() {
      return sender;
    }
    
    /** Sets the value of the 'sender' field */
    public org.poc.avro.serde.Dtls.Builder setSender(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.sender = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'sender' field has been set */
    public boolean hasSender() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'sender' field */
    public org.poc.avro.serde.Dtls.Builder clearSender() {
      sender = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'timestamp' field */
    public java.lang.CharSequence getTimestamp() {
      return timestamp;
    }
    
    /** Sets the value of the 'timestamp' field */
    public org.poc.avro.serde.Dtls.Builder setTimestamp(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.timestamp = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'timestamp' field has been set */
    public boolean hasTimestamp() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'timestamp' field */
    public org.poc.avro.serde.Dtls.Builder clearTimestamp() {
      timestamp = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'subject' field */
    public java.lang.CharSequence getSubject() {
      return subject;
    }
    
    /** Sets the value of the 'subject' field */
    public org.poc.avro.serde.Dtls.Builder setSubject(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.subject = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'subject' field has been set */
    public boolean hasSubject() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'subject' field */
    public org.poc.avro.serde.Dtls.Builder clearSubject() {
      subject = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'cc' field */
    public java.util.List<java.lang.CharSequence> getCc() {
      return cc;
    }
    
    /** Sets the value of the 'cc' field */
    public org.poc.avro.serde.Dtls.Builder setCc(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[3], value);
      this.cc = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'cc' field has been set */
    public boolean hasCc() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'cc' field */
    public org.poc.avro.serde.Dtls.Builder clearCc() {
      cc = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public Dtls build() {
      try {
        Dtls record = new Dtls();
        record.sender = fieldSetFlags()[0] ? this.sender : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.timestamp = fieldSetFlags()[1] ? this.timestamp : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.subject = fieldSetFlags()[2] ? this.subject : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.cc = fieldSetFlags()[3] ? this.cc : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
